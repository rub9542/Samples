[{"E:\\Abdul\\Brigosha\\hackathon-main\\src\\reportWebVitals.js":"1","E:\\Abdul\\Brigosha\\hackathon-main\\src\\root\\root.js":"2","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\dashboard.js":"3","E:\\Abdul\\Brigosha\\hackathon-main\\src\\reducers\\login.js":"4","E:\\Abdul\\Brigosha\\hackathon-main\\src\\services\\Color.js":"5","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\index.js":"6","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Auth\\index.js":"7","E:\\Abdul\\Brigosha\\hackathon-main\\src\\actions\\test.js":"8","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\index.js":"9","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\LoadingDataModal.js":"10","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\testBox.js":"11","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\textInputs\\index.js":"12","E:\\Abdul\\Brigosha\\hackathon-main\\src\\store.js":"13","E:\\Abdul\\Brigosha\\hackathon-main\\src\\services\\index.js":"14","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\addQ.js":"15","E:\\Abdul\\Brigosha\\hackathon-main\\src\\reducers\\test.js":"16","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Users\\index.js":"17","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\ListQuestionBox.js":"18","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\optionBox.js":"19","E:\\Abdul\\Brigosha\\hackathon-main\\src\\services\\Api.js":"20","E:\\Abdul\\Brigosha\\hackathon-main\\src\\App.js":"21","E:\\Abdul\\Brigosha\\hackathon-main\\src\\reducers\\users.js":"22","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\loremData.js":"23","E:\\Abdul\\Brigosha\\hackathon-main\\src\\actions\\users.js":"24","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\formulaEditor\\imageHandler.js":"25","E:\\Abdul\\Brigosha\\hackathon-main\\src\\actions\\login.js":"26"},{"size":362,"mtime":1610091883058,"results":"27","hashOfConfig":"28"},{"size":1233,"mtime":1610091884547,"results":"29","hashOfConfig":"28"},{"size":10560,"mtime":1610091884069,"results":"30","hashOfConfig":"28"},{"size":356,"mtime":1610091884484,"results":"31","hashOfConfig":"28"},{"size":659,"mtime":1610091884626,"results":"32","hashOfConfig":"28"},{"size":3648,"mtime":1610091884087,"results":"33","hashOfConfig":"28"},{"size":10082,"mtime":1610091884232,"results":"34","hashOfConfig":"28"},{"size":9858,"mtime":1610091883700,"results":"35","hashOfConfig":"28"},{"size":350,"mtime":1610091883790,"results":"36","hashOfConfig":"28"},{"size":512,"mtime":1610091883774,"results":"37","hashOfConfig":"28"},{"size":1942,"mtime":1610091883881,"results":"38","hashOfConfig":"28"},{"size":889,"mtime":1610091883902,"results":"39","hashOfConfig":"28"},{"size":595,"mtime":1610091883102,"results":"40","hashOfConfig":"28"},{"size":135,"mtime":1610091884657,"results":"41","hashOfConfig":"28"},{"size":15756,"mtime":1610091884044,"results":"42","hashOfConfig":"28"},{"size":9131,"mtime":1610091884508,"results":"43","hashOfConfig":"28"},{"size":11684,"mtime":1610091884414,"results":"44","hashOfConfig":"28"},{"size":2233,"mtime":1610091883757,"results":"45","hashOfConfig":"28"},{"size":1039,"mtime":1610091883809,"results":"46","hashOfConfig":"28"},{"size":8152,"mtime":1610179051809,"results":"47","hashOfConfig":"28"},{"size":1174,"mtime":1610091882969,"results":"48","hashOfConfig":"28"},{"size":2582,"mtime":1610091884526,"results":"49","hashOfConfig":"28"},{"size":4473,"mtime":1610091884104,"results":"50","hashOfConfig":"28"},{"size":2686,"mtime":1610091883719,"results":"51","hashOfConfig":"28"},{"size":467,"mtime":1610091884147,"results":"52","hashOfConfig":"28"},{"size":1034,"mtime":1610091883610,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"14ztd3g",{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Abdul\\Brigosha\\hackathon-main\\src\\reportWebVitals.js",[],["118","119"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\root\\root.js",["120"],"import React from 'react';\nimport Login from '../pages/Auth';\nimport Users from '../pages/Users';\nimport Admin from '../pages/Admin';\nimport Dashboard from '../pages/Admin/dashboard';\nimport AddTest from '../pages/Admin/addQ';\nimport Instructions from '../pages/Instructions';\nimport Test from '../pages/Test';\nimport EndTest from '../pages/Test/endTest';\nimport { Layout } from 'antd';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport '../design/layout.css';\n\nconst { Content } = Layout;\n\nclass Root extends React.Component {\n  componentDidMount() {}\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact path=\"/admin\" component={Admin} />\n          <Route exact path=\"/admin/dashboard\" component={Dashboard} />\n          <Route exact path=\"/admin/users\" component={Users} />\n          <Route exact path=\"/admin/dashboard/add-test\" component={AddTest} />\n          <Route exact path=\"/instructions\" component={Instructions} />\n          <Route exact path=\"/test\" component={Test} />\n          <Route exact path=\"/result\" component={EndTest} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default Root;\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\dashboard.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135"],"import React from 'react';\nimport {\n  Row, Col,\n  Button, Empty, Modal, Input,\n  Select, DatePicker, TimePicker\n} from 'antd';\nimport { LoadingOutlined, DeleteOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { connect } from \"react-redux\";\nimport moment from 'moment';\nimport {\n  TestBox,\n  LoginInputs,\n  RedButton,\n  LoadingDataModal\n} from '../../components';\nimport '../../design/layout.css';\nimport './styles.css';\nimport {Api} from '../../services';\nimport {\n  deleteTest,\n  getAdminTestQ,\n  addAdminTest,\n  getTest,\n  toggleTestLoader,\n} from '../../actions/test';\nimport { BsCheckCircle } from 'react-icons/bs';\n\nconst {Option} = Select;\n\nconst thickPic = require(\"../../Assets/brilogo.png\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      addQmodal: false,\n      beginTime: moment(),\n      endTime: moment().add(20, 'minutes'),\n      date: moment(),\n      sendDate: moment().format('YYYY-MM-DD'),\n      sendTime: moment().format('HH:mm'),\n      title: '',\n      type: 'Aptitude',\n      startTime: \"2020-12-19 03:00:00\",\n      duration: 20,\n      currentTestId: 0,\n      edit: false\n    }\n    this.addModal = this.addModal.bind(this);\n    this.addTest = this.addTest.bind(this);\n  }\n  componentDidMount() {\n    const {\n      getTest,\n      toggleTestLoader\n    } = this.props;\n    getTest('Admin');\n    toggleTestLoader(false);\n  }\n\n  openAddQModal = () => this.setState({addQmodal : true})\n  closeAddQModal = () => {\n    this.setState({addQmodal : false})\n    this.clearTestParams();\n  }\n  clearTestParams = () => this.setState({\n    title: '',\n    type: 'Aptitude',\n    startTime: \"2020-12-19 03:00:00\",\n    duration: 20,\n    currentTestId: 0,\n    edit: false\n  })\n\n  selectAfter = (\n    <Select\n      style={{ width: '100%', margin: 0, boderRadius: 10, }}\n      onChange={(e) => this.setState({type: e})}\n      defaultValue=\"Aptitude\" className=\"select-after\">\n      <Option value=\"Aptitude\">Aptitude</Option>\n      <Option value=\"Coding\">Coding</Option>\n    </Select>\n  );\n\n  openEditModal(data){\n    this.setState({\n      title: data.title,\n      type: data.type,\n      startTime: data.startTime,\n      duration: parseInt(data.duration),\n      beginTime: moment(data.startTime),\n      endTime: moment(data.startTime).add(data.duration, 'minutes'),\n      currentTestId: data.id,\n      addQmodal: true,\n      edit: true,\n    })\n  }\n\n\n  async addTest() {\n    const {\n      currentTestId,\n      title,\n      type,\n      sendDate,\n      sendTime,\n      duration,\n    } = this.state;\n    const {\n      addAdminTest\n    } = this.props;\n    // console.log({\n    //   title: title,\n    //   type: type,\n    //   startTime: sendDate + ' ' + sendTime + ':00',\n    //   duration: duration\n    // });\n    if(title === '' || sendDate === '' || sendTime === '' || duration === '') {\n      return\n    }\n    let response = await addAdminTest({\n      id: currentTestId,\n      title: title,\n      type: type,\n      startTime: sendDate + ' ' + sendTime + ':00',\n      duration: duration\n    })\n\n    if(response) {\n      this.closeAddQModal()\n    }\n  }\n\n  addModal = () => {\n    const {\n      beginTime,\n      date,\n      type,\n      title,\n      startTime,\n      sendDate,\n      sendTime,\n      endTime,\n      duration,\n      edit\n    } = this.state;\n    const {\n      addAdminTest\n    } = this.props;\n    return (\n      <Modal\n        className='autoSaveModal'\n        centered\n        visible={this.state.addQmodal}\n        bodyStyle={{\n          padding: 25,\n        }}\n        closable={false}\n        footer={null}\n      >\n        <div className='text-sm bold-600 text-center'>\n          Add Test Details\n        </div>\n        <span className='text-purple'>\n          Title\n        </span>\n        <input\n          style={{\n            border: '1px solid #d9d9d9',\n            padding: 5,\n            width: '100%',\n            display: 'block',\n            color: '#452F65 !important',\n          }}\n          value={title}\n          onChange={(e) => this.setState({title: e.target.value})}\n          type='text'\n        />\n        <Row justify='space-between' className='m-t-10'>\n          <Col xs={11}>\n            <div className='text-purple'>\n              Type\n            </div>\n            <div>\n              {this.selectAfter}\n            </div>\n          </Col>\n          <Col xs={11}>\n            <span className='text-purple m-r-10'>\n              Date\n            </span>\n            <DatePicker\n              value={date}\n              style={{\n                width: '100%'\n              }}\n              onChange={(date, dateString) => this.setState({\n                sendDate: dateString,\n                date: date,\n              })}\n            />\n          </Col>\n        </Row>\n        <Row justify='space-between' className='m-t-10'>\n          <Col xs={11}>\n            <div className='text-purple m-r-10'>\n              Start Time\n            </div>\n            <TimePicker\n              style={{width: '100%'}}\n              format='HH:mm'\n              value={beginTime}\n              onChange={(time, timeString) =>\n                this.setState({\n                  sendTime: timeString,\n                  beginTime: time,\n                  endTime: time,\n                  duration: moment(time).diff(moment(beginTime, 'minutes')) / 60000,\n                })\n              }\n            />\n          </Col>\n          <Col xs={11}>\n            <div className='text-purple m-r-10'>\n              End Time\n            </div>\n            <TimePicker\n              style={{width: '100%'}}\n              format='HH:mm'\n              value={endTime}\n              onChange={(time, timeString) => {\n                this.setState({\n                  duration: moment(time).diff(moment(beginTime, 'minutes')) / 60000,\n                  endTime: time\n                })\n              }}\n            />\n          </Col>\n        </Row>\n        <Row justify='space-between' className='m-t-20'>\n          <RedButton\n            onClick={() => this.closeAddQModal()}\n            shadowString='1px 1px 2px 1px #ff436577'\n          >\n            Cancel\n          </RedButton>\n          <RedButton\n            loading={this.props.testLoader}\n            disabled={duration <= 0 || title == ''}\n            onClick={() => {\n              this.addTest()\n            }}\n            shadowString='1px 1px 2px 1px #ff436577'\n          >\n            {edit ? \"Update\" : \"Add\"}\n          </RedButton>\n        </Row>\n      </Modal>\n    )\n  }\n\n  render() {\n    const {\n      currentTestId\n    } =  this.state;\n    const {\n      history,\n      testList,\n      testLoader,\n      deleteTest,\n      addAdminTest,\n      deleteLoader,\n      getAdminTestQ,\n      adminBoardLoader,\n    } = this.props;\n    return(\n      <div className='full-width full-height mainGreyBack' >\n        <Row\n          className='testTopBack p-10 text-center'\n          justify='space-between'\n          align='middle'\n        >\n          <Col className='text-white text-md bold-600'>\n            Brigosha Hackathon\n          </Col>\n          <Col className='text-white text-md bold-600 colockBox'>\n            TESTS\n          </Col>\n          <Col>\n            <Button\n              onClick={() => history.push('/admin/users')}\n              style={{\n                backgroundColor: '#FF4365',\n                color: 'white',\n                border: 'none',\n                fontWeight: 500,\n                borderRadius: 5,\n                marginTop: 10,\n              }}>\n              Users\n            </Button>\n\n            {/*<Button\n              onClick={() => this.openAddQModal()}\n              style={{\n                backgroundColor: '#FF4365',\n                color: 'white',\n                border: 'none',\n                fontWeight: 500,\n                borderRadius: 5,\n                marginTop: 10,\n              }}>\n              Add Test +\n            </Button>*/}\n          </Col>\n        </Row>\n        <Row style={{margin: 30}}>\n          <div\n          onClick={() => this.openAddQModal()}\n          className='addTestBox p-15 m-10 r-c-c-c cursor-pointer'\n          > <PlusCircleOutlined /> </div>\n          {testList && testList.length ?\n            testList.map((data, index) => (\n              <TestBox\n                loading={testLoader && currentTestId === data.id}\n                deleteLoading={deleteLoader && currentTestId === data.id}\n                onClickEdit={() => {\n                  this.setState({\n                    currentTestId: data.id,\n                  })\n                  if(testLoader || deleteLoader) return;\n                  getAdminTestQ(history, data.id)\n                }}\n                onClickDelete={() => {\n                  this.setState({\n                    currentTestId: data.id,\n                  })\n                  if(testLoader || deleteLoader) return;\n                  deleteTest(data.id)\n                }}\n                data={data}\n                index={index}\n                editTest={() => this.openEditModal(data)}\n              />\n            ))\n          : null\n          /*<Empty\n            description={\n            <div>\n              <div className='text-lightGrey bold-600'>\n                No Question Added\n              </div>\n              <Button\n                onClick={() => this.openAddQModal()}\n                style={{\n                  backgroundColor: '#FF4365',\n                  color: 'white',\n                  border: 'none',\n                  fontWeight: 500,\n                  borderRadius: 5,\n                  marginTop: 10,\n                }}>\n                Add Question +\n              </Button>\n            </div>\n            }\n            style={{marginTop: 20}}\n          />}*/}\n        </Row>\n        {this.addModal()}\n        <LoadingDataModal\n          visible={adminBoardLoader}\n          title='Tests'\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    testLoader,\n    testList,\n    deleteLoader,\n    adminBoardLoader,\n  } = state.test;\n  return {\n    testLoader,\n    testList,\n    deleteLoader,\n    adminBoardLoader,\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addAdminTest: (params) => dispatch(addAdminTest(params)),\n  getTest: (role) => dispatch(getTest(role)),\n  toggleTestLoader: (bool) => dispatch(toggleTestLoader(bool)),\n  deleteTest: (testId) => dispatch(deleteTest(testId)),\n  getAdminTestQ: (history, testId) => dispatch(getAdminTestQ(history, testId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n",["136","137"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\reducers\\login.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\services\\Color.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\index.js",["138","139"],"import React from 'react';\nimport { Row, Col, Button, Switch} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { connect } from \"react-redux\";\nimport {\n  LoginInputs\n} from '../../components';\nimport '../../design/layout.css';\nimport './styles.css';\nimport {Api} from '../../services';\nimport {\n  adminLogin\n} from '../../actions/login';\nimport { BsCheckCircle } from 'react-icons/bs';\n\nconst thickPic = require(\"../../Assets/brilogo.png\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showEmailValidator: false,\n      email: '',\n      pass: '',\n    }\n  }\n  componentDidMount() {\n    this.setState({\n      email: \"admin@brigosha.com\",\n      pass: \"1234\"\n    })\n  }\n\n\n  render() {\n    const {\n      email,\n      pass,\n      showEmailValidator,\n    } =  this.state;\n    const {\n      history,\n      adminLogin,\n      loginLoader,\n    } = this.props;\n    return(\n      <Row\n        className='darkBack full-width full-height'\n        align='middle'\n        justify='end'\n      >\n        <Col xs={0} md={16} className='full-height'>\n          <div className='m-l-30 m-t-30'>\n            <img\n              src={thickPic.default}\n              style={{width: 25, height: 'auto',}}\n              alt=\"\"\n            />\n          </div>\n        </Col>\n        <Col xs={24} md={8} className='p-10 p-r-30'>\n          <div\n            className='text-white bold-600 text-mdl'>\n            Brigosha Hackathon 2020\n          </div>\n          <div className='m-t-15'>\n            <LoginInputs\n              type=\"email\"\n              value={email}\n              onChangeText={(e) => {\n                const { value } = e.target;\n                const reg = /\\S+@\\S+\\.\\S+/;\n                if(!reg.test(value)) this.setState({showEmailValidator: true})\n                else this.setState({showEmailValidator: false})\n                this.setState({email: value})\n              }}\n              label='E-mail'\n              after={<BsCheckCircle className='text-cyan' style={{opacity: email && !showEmailValidator ? 1 : 0}} />}\n            />\n            <div\n              className='text-xs text-red bold-500'\n              style={{\n                height: '1.2em',\n                textShadow: '0px 0px 2px rgba(255,255,255, 0.5)',\n              }}>\n              {showEmailValidator && email? 'Enter a valid email address':''}\n            </div>\n          </div>\n          <div className='m-t-15'>\n            <LoginInputs\n              type='password'\n              value={pass}\n              onChangeText={(e) =>\n                this.setState({pass: e.target.value})\n              }\n              label='Password'\n            />\n          </div>\n          <Button\n            onClick={() => adminLogin({\n              email: email,\n              password: pass,\n            }, history)}\n            size='large'\n            style={{\n              color: 'white',\n              marginTop: 25,\n              borderRadius: 100,\n              width: '100%',\n              border: 'none',\n              backgroundImage: 'linear-gradient(90deg, #EE677E, #EB57DE)',\n            }}>\n            Sign In {loginLoader ? <LoadingOutlined style={{color: 'white'}} /> : <div style={{width: '1em', height: '1em'}} />}\n          </Button>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    loginLoader\n  } = state.login;\n  return {\n    loginLoader\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  adminLogin: (params, history) => dispatch(adminLogin(params, history))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Auth\\index.js",["140","141","142","143","144","145"],"import React from 'react';\nimport { Row, Col, Tag, Button, Dropdown, Menu, Select} from 'antd';\nimport { CloseOutlined, DownOutlined, LoadingOutlined } from '@ant-design/icons';\nimport { connect } from \"react-redux\";\nimport {\n  LoginInputs\n} from '../../components';\nimport '../../design/layout.css';\nimport './styles.css';\nimport {Api} from '../../services';\nimport {\n  logIn\n} from '../../actions/login';\nimport {\n  setStudentId,\n  setStudentTestId,\n  resetStudentTest,\n} from '../../actions/test';\nimport { BsCheckCircle, BsExclamationDiamond, BsBoxArrowInRight } from 'react-icons/bs';\n\nconst thickPic = require(\"../../Assets/brilogo.png\");\n\nconst { Option } = Select;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.addPl = this.addPl.bind(this);\n    this.addSkill = this.addSkill.bind(this);\n    this.state = {\n      visible: true,\n      showEmailValidator: false,\n      name: '',\n      email: '',\n      phNo: '',\n      sendSkills: [],\n      languages: [],\n      skills: ['API', 'DBMS', \"FED\", \"ANDROID\"],\n      programmingLangs: [],\n    }\n  }\n  componentDidMount() {\n    const {\n      setStudentId,\n      setStudentTestId,\n      resetStudentTest,\n    } = this.props;\n    var url = new URL(window.location);\n    var userId = url.searchParams.get(\"userId\");\n    var testId = url.searchParams.get(\"testId\");\n    setStudentId(userId);\n    setStudentTestId(testId);\n    resetStudentTest();\n    window.history.pushState({}, document.title, \"/\" + \"\");\n    Api.get(`/hackathon/register/${userId}`).send((response, error) => {\n      console.log(response);\n      if (response !== '' && response !== undefined) {\n        console.log(\"response\", response);\n        this.setState({\n          skills: response.skills,\n          programmingLangs: response.programmingLangs,\n          name: response.user.name,\n          email: response.user.email,\n          phNo: response.user.phone,\n        });\n      }\n    });\n  }\n  showMenu = (e) => {\n    e.stopPropagation();\n    console.log('testing');\n    this.setState({visible : true,})\n  }\n\n  addPl(data) {\n    const {\n      programmingLangs,\n      languages,\n    } =  this.state;\n    const len = programmingLangs.length;\n    for(let i=0; i<len; i++) {\n      if(languages[i] === data) return\n    }\n    languages.push(data);\n    this.setState({\n      languages\n    })\n  }\n  addSkill(data) {\n    console.log(data);\n    const {\n      skills,\n      sendSkills,\n    } =  this.state;\n    const len = sendSkills.length;\n    for(let i=0; i<len; i++) {\n      if(sendSkills[i] === data) return\n    }\n    sendSkills.push(data);\n    this.setState({\n      sendSkills\n    })\n  }\n\n  removeSkill(index) {\n    const {\n      sendSkills\n    } =  this.state;\n    sendSkills.splice(index,1)\n    this.setState({sendSkills});\n  }\n  removeLanguage(index) {\n    const {\n      languages\n    } =  this.state;\n    languages.splice(index,1)\n    this.setState({languages});\n  }\n\n  render() {\n    const {\n      name,\n      email,\n      phNo,\n      programmingLangs,\n      languages,\n      skills,\n      sendSkills,\n      showEmailValidator,\n    } =  this.state;\n    const {\n      history,\n      logIn,\n      loginLoader\n    } = this.props;\n\n    const langOptions = programmingLangs.map((data, index) => (\n      <Option key={data}>{data}</Option>\n    ));\n\n    const skillOptions = skills.map((data, index) => (\n      <Option key={data}>{data}</Option>\n    ))\n\n    return(\n      <Row\n        className='darkBack full-width full-height'\n        align='middle'\n        justify='end'\n      >\n        <Col xs={0} md={16} className='full-height hackBack'>\n          <div className='m-l-30 m-t-30'>\n            <img\n              src={thickPic.default}\n              style={{width: 25, height: 'auto',}}\n              alt=\"\"\n            />\n          </div>\n        </Col>\n        <Col xs={24} md={8} className='p-10 p-r-30'>\n          <div\n            className='text-white bold-600 text-mdl'>\n            Brigosha Hackathon 2020\n          </div>\n          <div className='m-t-30'>\n            <LoginInputs\n              type=\"text\"\n              value={name}\n              onChangeText={(e) => this.setState({name: e.target.value})}\n              label='Name'\n              after={\n                <BsCheckCircle className='text-cyan' style={{opacity: name ? 1 : 0}} />\n              }\n            />\n          </div>\n          <div className='m-t-15'>\n            <LoginInputs\n              type=\"email\"\n              value={email}\n              onChangeText={(e) => {\n                const { value } = e.target;\n                const reg = /\\S+@\\S+\\.\\S+/;\n                if(!reg.test(value)) this.setState({showEmailValidator: true})\n                else this.setState({showEmailValidator: false})\n                this.setState({email: value})\n              }}\n              label='E-mail'\n              after={<BsCheckCircle className='text-cyan' style={{opacity: email && !showEmailValidator ? 1 : 0}} />}\n            />\n            <div\n              className='text-xs text-red bold-500'\n              style={{\n                height: '1.2em',\n                textShadow: '0px 0px 2px rgba(255,255,255, 0.5)',\n              }}>\n              {showEmailValidator && email? 'Enter a valid email address':''}\n            </div>\n          </div>\n          <div className='m-t-15'>\n            <LoginInputs\n              value={phNo}\n              onChangeText={(e) => {\n                const { value } = e.target;\n                const reg = /^-?(0|[1-9][0-9]*)(\\.[0-9]*)?$/;\n                if ((!Number.isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n                  this.setState({phNo: e.target.value})\n                }\n              }}\n              label='Phone Number'\n              after={<BsCheckCircle className='text-cyan' style={{opacity: phNo.length === 10 ? 1 : 0}} />}\n            />\n          </div>\n          {/*\n          <Row className='m-t-15'>\n              <Col xs={9}>\n              <LoginInputs\n                label='Expreience'\n                after={\n                  <div className='bold-500 fade-color transparentBack'>Years</div>\n                }\n              />\n            </Col>\n            <Col xs={1} />\n            <Col xs={14}>\n              <LoginInputs\n                value={languages.toString()}\n                disabled\n                label='Programming Languages'\n                after={\n                  <Dropdown overlay={this.menu} trigger={['click']} >\n                    <DownOutlined />\n                  </Dropdown>\n                }\n              />\n            </Col>\n          </Row>\n          */}\n          <div className='m-t-15'>\n            <div className='m-b-5 text-xs text-e3'>\n              Languages\n            </div>\n            <Select\n              size='large'\n              defaultValue=''\n              onChange={(e) => this.addPl(e)}\n              style={{\n                width: '100%'\n              }}\n            >\n              {langOptions}\n            </Select>\n            <div className='m-t-10 m-b-10'>\n              {languages.length ? languages.map((data, index) =>\n                <Tag\n                  key={index.toString()}\n                  className='skillTag transparentBack'\n                  closable\n                  closeIcon={\n                    <CloseOutlined\n                      className='text-xs'\n                      style={{\n                        color: 'white',\n                        border: '1px solid white',\n                        padding: 2,\n                        borderRadius: 20\n                      }}\n                    />\n                  }\n                  onClose={() => this.removeLanguage(index)}\n                >\n                  {data}\n                </Tag>\n              ): null}\n            </div>\n          </div>\n          <div className='m-b-5 text-xs text-e3'>\n            Skills\n          </div>\n          <Select\n            size='large'\n            defaultValue=''\n            onChange={(e) => this.addSkill(e)}\n            style={{ width: '100%' }}\n          >\n            {skillOptions}\n          </Select>\n          <div className='m-t-15'>\n            {sendSkills.length ? sendSkills.map((data, index) =>\n              <Tag\n                key={index.toString()}\n                className='skillTag transparentBack'\n                closable\n                closeIcon={\n                  <CloseOutlined\n                    className='text-xs'\n                    style={{\n                      color: 'white',\n                      border: '1px solid white',\n                      padding: 2,\n                      borderRadius: 20\n                    }}\n                  />\n                }\n                onClose={() => this.removeSkill(index)}\n              >\n                {data}\n              </Tag>\n            ): null}\n          </div>\n          <Button\n            onClick={() => logIn({\n              name: name,\n              phone: phNo,\n              email: email,\n              programmingLangs: languages,\n              skills: sendSkills,\n            }, history)}\n            size='large'\n            style={{\n              color: 'white',\n              marginTop: 15,\n              borderRadius: 100,\n              width: '100%',\n              border: 'none',\n              backgroundImage: 'linear-gradient(90deg, #EE677E, #EB57DE)',\n            }}>\n            Proceed <BsBoxArrowInRight /> {loginLoader ? <LoadingOutlined style={{color: 'white'}} /> : <div style={{width: '1em', height: '1em'}} />}\n          </Button>\n        </Col>\n      </Row>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    loginLoader\n  } = state.login;\n  return {\n    loginLoader\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  logIn: (params, history) => dispatch(logIn(params, history)),\n  setStudentId: (value) => dispatch(setStudentId(value)),\n  setStudentTestId: (value) => dispatch(setStudentTestId(value)),\n  resetStudentTest: () => dispatch(resetStudentTest()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n",["146","147"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\actions\\test.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\index.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\LoadingDataModal.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\testBox.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\textInputs\\index.js",["148","149"],"import React from 'react';\nimport { Input } from 'antd';\nimport '../../design/layout.css';\nimport './styles.css';\n\nconst LoginInputs = ({\n  label,\n  after,\n  disabled = false,\n  value,\n  onChangeText,\n  type\n}) => (\n  <div className='text-xs text-e3'>\n    <div className='m-b-5'>\n      {label}\n    </div>\n    {type === 'password' ?\n      <Input.Password\n        type={type}\n        value={value}\n        onChange={(e) => onChangeText(e)}\n        disabled={disabled}\n        type='text'\n        size='large'\n        className='loginputs'\n        suffix={after}\n        placeholder=\"input password\"\n      />\n      :\n      <Input\n        type={type}\n        value={value}\n        onChange={(e) => onChangeText(e)}\n        disabled={disabled}\n        type='text'\n        size='large'\n        className='loginputs'\n        suffix={after}\n      />\n    }\n  </div>\n);\n\nexport default LoginInputs;\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\store.js",["150","151"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\services\\index.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\addQ.js",["152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import React from 'react';\nimport { Color } from '../../services'\nimport {\n  Row, Col, Tag,\n  Button, Tabs,\n  Radio, Input,\n  Upload, Empty,\n  Menu, Dropdown, Modal\n} from 'antd';\nimport { connect } from \"react-redux\";\nimport {\n  setAdminAnswer,\n  setAdminQindex,\n  setAdminOptionValue,\n  // setAdminQuestion,\n  setStatement,\n  setQtype,\n  addAdminQues,\n  deleteAdminQues,\n  deleteAdminOption,\n  addAdminTestQues,\n  addAdminOption,\n  deleteImages,\n  pushQToArray,\n  handleQuestionInput\n} from '../../actions/test';\nimport {\n  CloseOutlined, DeleteOutlined,\n  PlusCircleOutlined, StarOutlined, LeftOutlined,\n  SaveOutlined, ExclamationCircleOutlined\n} from '@ant-design/icons';\nimport {BsFillBookmarkFill, BsBookmark, BsCaretRightFill, BsCaretDownFill} from 'react-icons/bs';\nimport {ListQuestionBox, RedButton, OptionBox} from '../../components';\nimport '../../design/layout.css';\nimport './styles.css';\nimport {data} from './loremData.js';\nimport FormulaEditor from './formulaEditor';\n\nconst { TabPane } = Tabs;\nconst { confirm } = Modal;\n\nconst thickPic = require(\"../../Assets/brilogo.png\");\nconst phpImg = require(\"../../Assets/instructions.png\");\n\nfunction getFilename(url){\n  return url ? url.split('/').pop().split('#').shift().split('?').shift() : null;\n}\n\nclass Test extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      rendorEditor: true\n    }\n  }\n\n  componentWillUnmount(){\n    this.clearCurrentQ();\n  }\n\n    onDelete(self) {\n    return confirm({\n      title: `Doyou want to delete the question?`, //${text}\n      icon: <ExclamationCircleOutlined />,\n      content: 'Please click OK to confim',\n      onOk() {self.onDeleteConfirm()},\n      onCancel() {},\n    })\n  }\n\n\n  onDeleteConfirm(){\n    const {deleteAdminQues} = this.props;\n    deleteAdminQues();\n    this.clearCurrentQ();\n  }\n\n  onChange(value) {\n    // if(value === \"<p><br></p>\" && this.props.adminQ[this.props.adminQIndex] === \"<p><br></p>\") return\n    // this.props.setAdminQuestion(value);\n    this.props.setStatement(value)\n  };\n\n  onSave(){\n     const statement =  FormulaEditor.quillRef.getEditorContents();\n\n    this.props.pushQToArray(statement);\n    // this.props.setAdminQindex(this.props.adminQIndex + 1);\n  }\n\n  clearImages(){\n    const {\n      questionImagesList,\n      deleteImages,\n      oldImageList,\n      deletedImages,\n      adminQIndex,\n      adminQ,\n    } =  this.props;\n    let deletedList = [];\n    if(adminQIndex < adminQ.length - 1){ //Edit question case\n      deletedImages.forEach(img => {\n        if(!oldImageList.includes(img)){\n          deletedList.push(img)\n        }\n      })\n    }else{ //Add Question case\n      deletedList = [...deletedImages];\n      questionImagesList.forEach(img => {\n        if(!deletedImages.includes(img)){\n          deletedList.push(img)\n        }\n      })\n    }\n    if(deletedList.length){\n     deleteImages(deletedList);\n    }\n    questionImagesList.splice(0, questionImagesList.length )\n    deletedImages.splice(0, deleteImages.length)\n    oldImageList.splice(0, oldImageList.length)\n  }\n\n  clearCurrentQ(){\n    const { setAdminQindex, handleQuestionInput} = this.props;\n    handleQuestionInput(-1, 'id');\n    handleQuestionInput(\"<p></p>\", 'question');\n    handleQuestionInput(\"Short\", 'type');\n    handleQuestionInput(\"\", 'answer');\n    handleQuestionInput(1, 'negative');\n    handleQuestionInput(3, 'positive');\n    handleQuestionInput([], 'options');\n    setAdminQindex(-1);\n  }\n\n  qClick = (index) => {\n    const {\n      adminQ,\n      adminQIndex,\n      setAdminQindex,\n      questionImagesList,\n      oldImageList,\n      handleQuestionInput,\n    } =  this.props;\n    setAdminQindex(index);\n    handleQuestionInput(adminQ[index].id, 'id');\n    handleQuestionInput(adminQ[index].question, 'question');\n    handleQuestionInput(adminQ[index].type, 'type');\n    handleQuestionInput(adminQ[index].answer, 'answer');\n    handleQuestionInput(adminQ[index].negative, 'negative');\n    handleQuestionInput(adminQ[index].positive, 'positive');\n    handleQuestionInput(adminQ[index].options, 'options');\n    Array.from( new DOMParser().parseFromString( adminQ[index], 'text/html' )\n    .querySelectorAll( 'img' ) )\n    .map( img => {\n      questionImagesList.push(getFilename(img.getAttribute( 'src' )))\n      oldImageList.push(getFilename(img.getAttribute( 'src' )))\n    })\n  }\n\n  typeMenu = (\n    <Menu>\n      <Menu.Item onClick={() => this.props.handleQuestionInput('Short','type')}>\n        Short\n      </Menu.Item>\n      <Menu.Item onClick={() => this.props.handleQuestionInput('MCQ','type')}>\n        MCQ\n      </Menu.Item>\n    </Menu>\n  );\n\n  render() {\n    const {\n      adminQ,\n      adminQIndex,\n      testLoader,\n      setAdminQindex,\n      setAdminAnswer,\n      addAdminQues,\n      addAdminOption,\n      addAdminTestQues,\n      setAdminOptionValue,\n      deleteAdminOption,\n      deleteAdminQues,\n      deletedImages,\n      questionImagesList,\n      editingTest,\n      history,\n      currentQ,\n      pushQToArray,\n      delQLoader\n    } = this.props;\n    // if(!adminQ || !adminQ.length) {\n    //   // return (\n    //   //   <div>\n    //   //     <Row\n    //   //       className='testTopBack p-10 text-center'\n    //   //       justify='space-between'\n    //   //       align='middle'\n    //   //     >\n    //   //       <Col className='text-white text-md bold-600'>\n    //   //         Brigosha Hackathon\n    //   //       </Col>\n    //   //       <Col className='text-white text-md bold-600'>\n    //   //         Questions\n    //   //         {/*{editingTest.title}*/}\n    //   //       </Col>\n    //   //       <Col className='text-white text-md bold-600'>\n    //   //\n    //   //       </Col>\n    //   //     </Row>\n    //   //     <Empty\n    //   //       description={\n    //   //       <div>\n    //   //         <div className='text-lightGrey bold-600'>\n    //   //           No Questions Added\n    //   //         </div>\n    //   //         <RedButton onClick={() => addAdminQues()}>\n    //   //           Add Question +\n    //   //         </RedButton>\n    //   //       </div>\n    //   //       }\n    //   //       style={{marginTop: '20%'}}\n    //   //     />\n    //   //   </div>\n    //   // )\n    // }\n    return (\n      <div className='full-width full-height mainGreyBack' >\n        <Row\n          className='testTopBack p-10 text-center'\n          justify='space-between'\n          align='middle'\n        >\n          <Col className='text-white text-md bold-600'>\n            Brigosha Hackathon\n          </Col>\n          <Col className='text-white text-md bold-600'>\n            Questions\n            {/*{editingTest.title}*/}\n          </Col>\n          <Col>\n            <RedButton\n              loading={testLoader}\n              onClick={() => addAdminTestQues(history)}\n              shadowString='1px 1px 2px 0px #205'\n              margin='0px 10px 0px 0px'\n            >\n              <SaveOutlined />\n            </RedButton>\n            <RedButton\n              onClick={() => {this.clearCurrentQ(); setAdminQindex(adminQ.length)}}\n              shadowString='1px 1px 2px 0px #205'\n              margin='0px 10px 0px 0px'\n            >\n              <PlusCircleOutlined />\n            </RedButton>\n\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={8}>\n\n           <div className='listQBox m-10 hideScroll'>\n              <div className='p-10 divider topQListBar r-c-sb text-lightGrey'>\n                <div  className='text-md bold-600 cursor-pointer' onClick={() => {history.goBack()}}>\n                  <LeftOutlined /> {editingTest.title}\n                </div>\n                <div>\n                  {adminQ.length} {adminQ.length > 1 ? 'Questions ' : 'Question '}\n                   | Total Points: {adminQ.length * 3}\n                </div>\n              </div>\n              {!adminQ || !adminQ.length ?\n                      <Empty\n                        className='r-c-c-c'\n                        description={\n                        <div>\n                          <div className='text-lightGrey bold-600'>\n                            No Questions Added\n                          </div>\n                          {/*<RedButton onClick={() => {addAdminQues(); setAdminQindex(0)}}>\n                            Add Question +\n                          </RedButton>*/}\n                        </div>\n                        }\n                        style={{marginTop: '20%'}}\n                      /> :\n                adminQ.map((data, index) =>  (\n                <div style={index === adminQIndex ? {backgroundColor: Color.lightprimary, margin: 1, borderRadius: 5} : {}}>\n                  <ListQuestionBox\n                    admin\n                    onPressQues={() => this.qClick(index)}\n                    data={data}\n                    index={index}\n                    isSet={false}\n                  />\n                </div>\n              ))}\n            </div>\n          </Col>\n          <Col xs={16}>\n          {\n            <div className='listQBox hideScroll m-10'>\n              <div className='p-10 divider-dark topQListBar r-c-sb text-lightGrey'>\n                <div>\n                  Question {adminQIndex + 1}\n                </div>\n                <div>\n                  { currentQ ?\n                    <>\n                    {/*Points: {adminQ[adminQIndex].positive}  Negative:{-1*adminQ[adminQIndex].negative}*/}\n                    Points: {currentQ.positive}  Negative:{-1*currentQ.negative}\n                    </> :\n                    null }\n                </div>\n                <Dropdown trigger={['hover']} overlay={this.typeMenu}>\n                  <Button\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      boxShadow: '1px 1px 2px 1px #ff436577',\n                      margin: '0px 0px 0px 10px',\n                      backgroundColor: '#FF4365',\n                      color: 'white',\n                      border: 'none',\n                      fontWeight: 500,\n                      borderRadius: 5,\n                    }}\n                  >\n                    {currentQ && currentQ.type } <BsCaretDownFill />\n                  </Button>\n                </Dropdown>\n              </div>\n              <div className='r-jsb-c flex-1 m-b-10'>\n                <div className='p-10 flex-1'>\n                  {\n                   <FormulaEditor\n                    id={'statement'}\n                    deletedImages={deletedImages}\n                    deleteImages={(imgList, index) => deleteImages(imgList, index)}\n                    resetEditor={() => this.resetEditor()}\n                    clearImages={() => this.clearImages()}\n                    data={currentQ ? currentQ.question : '<p></p>'}\n                    imagesList={questionImagesList}\n                    onChange={(value) => this.onChange(value)} //this.onChange(value)\n                    />}\n                </div>\n                <div className='m-t-10 flex-1'>\n                  { currentQ &&  currentQ.type === 'MCQ' ?\n                  <>\n                    <span className='text-red p-l-10'>* </span>Add Correct Answer\n                    <RedButton\n                      onClick={() => addAdminOption()}\n                      margin='0px 0px 0px 20px'\n                      shadowString='1px 1px 2px 1px #ff436577'\n                    >\n                      Add Option\n                    </RedButton>\n                  </>\n                  : null}\n                  {currentQ && currentQ.type === \"Short\" ?\n                    <div className='full-width p-10'>\n                      <Input\n                        className='optionBox'\n                        size='large'\n                        value={currentQ.answer}\n                        onChange={(e) => setAdminAnswer(e.target.value)}\n                      />\n                    </div>\n                  : null}\n                  {currentQ && currentQ.type === 'MCQ' && currentQ.options && currentQ.options.length ? currentQ.options.map((data, index) =>\n                    <OptionBox\n                      data={data}\n                      index={index}\n                      isSelected={index.toString() === currentQ.answer}\n                      setAdminAnswer={() => setAdminAnswer(index.toString())}\n                      setAdminOptionValue={(value) => setAdminOptionValue(value, index)}\n                      deleteAdminOption={() => deleteAdminOption(index)}\n                    />\n                  ) : null}\n                    {/*<Button\n                      onClick={() => deleteAdminQues()}\n                      shadowString='1px 1px 2px 0px #205'\n                      margin='0px 10px 0px 0px'\n                    >\n                      <DeleteOutlined />\n                    </RedButton>*/}\n                    <div className='r-fe-fe m-r-10'>\n                    <Button\n                      onClick={() => this.onDelete(this)}\n                      size='large'\n                      type={'primary'}\n                      loading={delQLoader}\n                      style={{\n                        paddingLeft: 25,\n                        paddingRight: 25,\n                        marginTop: 15,\n                        borderRadius: 10,\n                        marginRight: 10,\n                        backgroundColor: Color.red,\n                        borderColor: Color.red,\n                      }}\n                      disabled={currentQ ? (!currentQ.question || !currentQ.answer) : true}\n                      >\n                      Delete\n                    </Button>\n                    <Button\n                      onClick={() => this.onSave()}\n                      size='large'\n                      type={'primary'}\n                      style={{\n                        paddingLeft: 25,\n                        paddingRight: 25,\n                        marginTop: 15,\n                        borderRadius: 10,\n                        border: '1px solid #A5AAB5',\n                      }}\n                      disabled={currentQ ? (!currentQ.question || !currentQ.answer) : true}\n                      >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>}\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    adminQ,\n    adminQIndex,\n    questionImagesList,\n    oldImageList,\n    deletedImages,\n    testLoader,\n    editingTest,\n    currentQ,\n    delQLoader\n  } = state.test;\n  return {\n    adminQ,\n    adminQIndex,\n    questionImagesList,\n    oldImageList,\n    deletedImages,\n    testLoader,\n    editingTest,\n    currentQ,\n    delQLoader\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setAdminAnswer: (value) => dispatch(setAdminAnswer(value)),\n  setQtype: (value) => dispatch(setQtype(value)),\n  addAdminQues: () => dispatch(addAdminQues()),\n  deleteImages: (images, index) => dispatch(deleteImages(images, index)),\n  deleteAdminQues: () => dispatch(deleteAdminQues()),\n  addAdminOption: () => dispatch(addAdminOption()),\n  deleteAdminOption: (index) => dispatch(deleteAdminOption(index)),\n  setAdminQindex: (index) => dispatch(setAdminQindex(index)),\n  // setAdminQuestion: (value) => dispatch(setAdminQuestion(value)),\n  setStatement: (value) => dispatch(setStatement(value)),\n  addAdminTestQues: (history) => dispatch(addAdminTestQues(history)),\n  setAdminOptionValue: (value, index) => dispatch(setAdminOptionValue(value, index)),\n  pushQToArray: (statement) => dispatch(pushQToArray(statement)),\n  handleQuestionInput: (value, key) => dispatch(handleQuestionInput(value, key)),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Test);\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\reducers\\test.js",["170","171"],"import {\n  TOGGLE_TEST_LOADER,\n  SET_TEST_QUESTIONS,\n  SET_TEST_DETAILS,\n  RESET_STUDENT_TEST,\n  SET_QUES,\n  SET_RESULT,\n  SET_BOOKMARK,\n  SET_ANSWER,\n  SET_ANSWER_ARRAY,\n  SET_ADMIN_ANSWER,\n  SET_ADMIN_QINDEX,\n  SET_ADMIN_OPTION_VALUE,\n  SET_ADMIN_QUESTION,\n  SET_TIME_AND_SEC,\n  SET_Q_TYPE,\n  ADD_ADMIN_QUES,\n  DELETE_ADMIN_QUES,\n  ADD_ADMIN_OPTION,\n  DELETE_ADMIN_OPTION,\n  PUSH_ADMIN_TEST,\n  SET_ADMIN_TEST_LIST,\n  TOGGLE_ADMIN_BOARD_LOADER,\n  SET_CURRENT_ADMIN_TEST,\n  TOGGLE_DELETE,\n  PUSH_Q_TO_ARRAY,\n  SET_STATEMENT,\n  SET_STUDENT_ID,\n  SET_STUDENT_TEST_ID,\n  UPDATE_Q_PARAMS,\n  TOGGLE_DEL_Q_LOADER\n} from '../actions/test';\n\nconst initialState = {\n  testLoader: false,\n  deleteLoader: false,\n  questions: [],\n  studentTestId: '',\n  studentId: '',\n  editingTest: [],\n  testDetails: {},\n  qindex: 0,\n  solutions: [],\n  result: {},\n  currentQType: 'Short',\n  adminQIndex: -1,\n  testList: [\n    {\n      \"id\": 2,\n      \"title\": \"Test2\",\n      \"type\": \"Aptitude\",\n      \"totalPoints\": null,\n      \"startTime\": \"2020-12-18T21:30:00.000Z\",\n      \"duration\": \"20\"\n    },\n    {\n      \"id\": 1,\n      \"title\": \"Test1\",\n      \"type\": \"Aptitude\",\n      \"totalPoints\": 6,\n      \"startTime\": \"2020-12-18T21:30:00.000Z\",\n      \"duration\": \"20\"\n    }\n  ],\n  editingTest: {\n    \"id\": 1,\n    \"title\": \"Test1\",\n    \"type\": \"Aptitude\",\n    \"totalPoints\": 6,\n    \"startTime\": \"2020-12-18T21:30:00.000Z\",\n    \"duration\": \"20\"\n  },\n  adminQ: [\n    // {\n    //   question: null,\n    //   type: 'MCQ',\n    //   positive: 3,\n    //   negative: 1,\n    //   options: [\n    //\n    //   ]\n    // },\n    // {\n    //   question: null,\n    //   type: 'Short',\n    //   positive: 3,\n    //   negative: 1,\n    //   answer: '',\n    //   options: []\n    // }\n  ],\n  currentQ: {\n    question: \"<p></p>\",\n    type: 'Short', //state.adminQIndex\n    positive: 3,\n    negative: 1,\n    answer: '',\n    options: [],\n  },\n  adminBoardLoader: false,\n  questionImagesList: [],\n  deletedImages: [],\n  oldImageList: [],\n  seconds: 3600,\n  time: {\n    h: 1,\n    m: 0,\n    s: 0,\n  },\n  delQLoader: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_TEST_LOADER:\n      return {\n        ...state,\n        testLoader : action.bool\n      };\n    case TOGGLE_DEL_Q_LOADER:\n      return {\n        ...state,\n        delQLoader : action.state\n      };\n    case TOGGLE_DELETE:\n      return {\n        ...state,\n        deleteLoader : action.bool\n      };\n    case TOGGLE_ADMIN_BOARD_LOADER:\n      return {\n        ...state,\n        adminBoardLoader : action.bool\n      };\n    case SET_TEST_QUESTIONS:\n      return {\n        ...state,\n        questions: action.data,\n        solutions: action.answerArray,\n      };\n    case SET_TEST_DETAILS:\n      const time = {\n        h: Math.floor(action.data.duration / 60),\n        m: action.data.duration % 60,\n        s: 0,\n      }\n      return {\n        ...state,\n        testDetails : {\n          ...action.data\n        },\n        time: {...time},\n        seconds: action.data.duration * 60\n      };\n    case SET_QUES:\n      return {\n        ...state,\n        qindex : action.index\n      };\n    case SET_RESULT:\n      return {\n        ...state,\n        result : action.data\n      };\n    case SET_STUDENT_TEST_ID:\n      return {\n        ...state,\n        studentTestId : action.value\n      };\n    case SET_STUDENT_ID:\n      return {\n        ...state,\n        studentId : action.value\n      };\n    case SET_BOOKMARK:\n      if(typeof state.questions[action.index].bookmarked == 'undefined') {\n        state.questions[action.index].bookmarked = true;\n      } else {\n        state.questions[action.index].bookmarked = !state.questions[action.index].bookmarked\n      }\n      return {\n        ...state,\n        questions: state.questions.slice(0)\n      }\n    case SET_ANSWER:\n      if(state.questions[state.qindex].type === 'MCQ' && state.questions[state.qindex].answer === action.value) {\n        state.questions[state.qindex].answer = '';\n      } else {\n        state.questions[state.qindex].answer = action.value;\n      }\n      return {\n        ...state,\n        questions: state.questions.slice(0)\n      }\n    case SET_ADMIN_ANSWER:\n      // let que = {...state.currentQ, answer: action.value}\n      // if(state.currentQ.type === 'MCQ') {\n      //   // if(state.currentQ.options[action.value] === action.value) {\n      //   //   state.currentQ.options[action.value] = ''\n      //   // } else {\n      //   //   que = {...state.currentQ, answer: action.value}\n      //   // }\n      // } else {\n      //   state.currentQ.answer = action.value\n      // }\n      return {\n        ...state,\n        currentQ: {...state.currentQ, answer: action.value}\n      }\n    case SET_ADMIN_OPTION_VALUE:\n      state.currentQ.options[action.index] = action.value;\n      return {\n        ...state,\n        // adminQ: state.adminQ.slice(0)\n        currentQ: {...state.currentQ }\n      }\n    case SET_Q_TYPE:\n      // state.adminQ[state.adminQIndex].type = action.value;\n      state.currentQ.type = action.value;\n      console.log(SET_Q_TYPE, state.currentQ);\n      return {\n        ...state,\n        // adminQ: state.adminQ.slice(0),\n        currentQ: {...state.currentQ},\n      }\n    case PUSH_Q_TO_ARRAY:\n      // state.adminQ[state.adminQIndex].type = action.value;\n      let nextQ;\n      const quest = {...state.currentQ, question: action.statement,\n        id: state.currentQ.id === -1 ?\n        null : state.currentQ.id };\n      if(state.adminQ[state.adminQIndex]){\n        state.adminQ[state.adminQIndex] = quest;\n      }else{\n        state.adminQ.push(quest);\n      }\n      state.adminQIndex = state.adminQIndex === -1 ? 0 : state.adminQIndex;\n      if(state.adminQ[state.adminQIndex+1]){\n        nextQ = {...state.adminQ[state.adminQIndex+1]}\n      }else{\n        nextQ = {\n          question: \"<p></p>\",\n          type:  'Short', //state.adminQIndex\n          positive: 3,\n          negative: 1,\n          answer: '',\n          options: [],\n        }\n\n      }\n      return {\n        ...state,\n        adminQIndex: state.adminQIndex+1,\n        adminQ: [...state.adminQ],\n        currentQ: {...nextQ}\n      }\n    case ADD_ADMIN_QUES:\n      state.adminQ.push({\n        question: '<p></p>',\n        type: state.adminQ.length ? state.adminQ[state.adminQIndex].type : 'Short',\n        positive: 3,\n        negative: 1,\n        answer: '',\n        options: [],\n      })\n      return {\n        ...state,\n        // adminQ: state.adminQ.slice(0)\n        currentQ: {\n          question: \"<p></p>\",\n          type: state.adminQ.length ? state.adminQ[state.adminQIndex].type : 'Short', //state.adminQIndex\n          positive: 3,\n          negative: 1,\n          answer: '',\n          options: [],\n        }\n      }\n    case DELETE_ADMIN_QUES:\n      state.adminQ.splice(state.adminQIndex, 1);\n      if (state.adminQIndex > state.adminQIndex.length - 1) {\n        state.adminQIndex = state.adminQ.length - 1\n      }\n      return {\n        ...state,\n        adminQ: state.adminQ.slice(0),\n        adminQIndex: state.adminQIndex,\n      }\n    case ADD_ADMIN_OPTION:\n      if(state.currentQ.options.length < 4) {\n        state.currentQ.options.push('')\n      }\n      return {\n        ...state,\n        adminQ: state.adminQ.slice(0)\n      }\n    case UPDATE_Q_PARAMS:\n        return {\n          ...state,\n          currentQ: {...state.currentQ, ...action.qParam}\n        };\n    case DELETE_ADMIN_OPTION:\n      if(state.adminQ[state.adminQIndex].options.length > 0) {\n        state.adminQ[state.adminQIndex].options.splice(action.index, 1)\n      }\n      return {\n        ...state,\n        adminQ: state.adminQ.slice(0)\n      }\n    case SET_ANSWER_ARRAY:\n      state.solutions[state.qindex].answer = state.questions[state.qindex].answer\n      return {\n        ...state,\n        solutions: state.solutions.slice(0)\n      }\n    case SET_ADMIN_QINDEX:\n      return {\n        ...state,\n        adminQIndex: action.index\n      }\n    case PUSH_ADMIN_TEST:\n      state.testList.push(action.data);\n      return {\n        ...state,\n        testList: state.testList.slice(0)\n      }\n    case SET_ADMIN_TEST_LIST:\n      state.testList = action.data\n      return {\n        ...state,\n        testList: state.testList.slice(0)\n      }\n    case RESET_STUDENT_TEST:\n      return {\n        ...state,\n        questions: [],\n        qindex: 0,\n        solutions: [],\n      }\n    // case SET_ADMIN_QUESTION:\n    //   // state.adminQ[state.adminQIndex].question = action.value\n    //   // state.currentQ.question = action.value;\n    //   return {\n    //     ...state,\n    //     currentQ: {...state.currentQ, question: action.value}\n    //     // adminQ: state.adminQ.slice(0)\n    //   }\n    case SET_STATEMENT:\n      return {\n        ...state,\n        currentQ: {...state.currentQ, question: action.value}\n      }\n    case SET_CURRENT_ADMIN_TEST:\n      return {\n        ...state,\n        editingTest: action.data,\n        adminQ: action.data.questions,\n      }\n    case SET_TIME_AND_SEC:\n      return {\n        ...state,\n        time: action.time,\n        seconds: action.sec\n      }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Users\\index.js",["172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193"],"import React from 'react';\nimport {\n  Row, Col, Tag,\n  Button, Tabs,\n  Radio, Input,\n  Upload, Empty,\n  Menu, Dropdown,\n  Select, Checkbox, Table\n} from 'antd';\nimport { connect } from \"react-redux\";\nimport {\n  CloseOutlined, DeleteOutlined,\n  PlusCircleOutlined, StarOutlined, LeftOutlined\n} from '@ant-design/icons';\nimport {BsFillBookmarkFill, BsBookmark, BsCaretRightFill} from 'react-icons/bs';\nimport {ListQuestionBox, RedButton, OptionBox} from '../../components';\nimport '../../design/layout.css';\nimport { Color } from '../../services'\nimport {getUsers, updateUserSelect, selectAll, updateUserStatus, sendMail, setUserStatusFilter} from '../../actions/users'\nimport './styles.css';\nimport {\n  LoadingDataModal\n} from '../../components';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nconst thickPic = require(\"../../Assets/brilogo.png\");\nconst phpImg = require(\"../../Assets/instructions.png\");\nconst columns = [\n  {\n    title: 'Total Questions',\n    dataIndex: 'qCount',\n  },\n  {\n    title: 'Attempted',\n    dataIndex: 'attempted',\n  },\n  {\n    title: 'Correct',\n    dataIndex: 'correct',\n  },\n  {\n    title: 'Incorrect',\n    dataIndex: 'wrong',\n  },\n  {\n    title: 'Total Marks',\n    dataIndex: 'totalMarks',\n  },\n];\n\nclass Users extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectIndex: -1\n    }\n  }\n\n  state = {\n    value: ' '\n  }\n\n  handleChange(value) {\n    this.setState({ value });\n  }\n\n  componentDidMount() {\n    this.props.getUsers();\n  }\n\n  componentWillUnmount(){\n    this.props.emailList.splice(0, this.props.emailList.length)\n  }\n\n  changeUserStatus(status){\n    const userId = this.props.users[this.state.selectIndex].id;\n    this.props.updateUserStatus(this.state.selectIndex, userId, status)\n  }\n\n  render() {\n    const {\n      users, history, updateUserSelect, selectAll, selectLoader, rejectLoader, sendMail, userLoader, setUserStatusFilter, userStatusFilter, mailLoader\n    } = this.props;\n    return (\n      <div className='full-width full-height mainGreyBack' >\n        <Row\n          className='testTopBack p-10 text-center'\n          justify='space-between'\n          align='middle'\n        >\n          <Col className='text-white text-md bold-600'>\n            Brigosha Hackathon\n          </Col>\n          <Col className='text-white text-md bold-600'>\n            Users\n            {/*{editingTest.title}*/}\n          </Col>\n          <Col>\n          <Button\n            onClick={() => history.push('/admin/dashboard')}\n            style={{\n              backgroundColor: '#FF4365',\n              color: 'white',\n              border: 'none',\n              fontWeight: 500,\n              borderRadius: 5,\n              marginTop: 10,\n            }}>\n            Tests\n          </Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={10}>\n            <div className='r-jsb' style={{margin: 10}}>\n              <div>\n                <Select defaultValue=\"2020\" style={{ width: 120 }} onChange={(val) => console.log(val)}>\n                  <Option value=\"2020\">2020</Option>\n                </Select>\n                <Select defaultValue=\"All\" value={userStatusFilter} style={{ width: 120 }} onChange={(val) => setUserStatusFilter(val)}>\n                  <Option value=\"All\">All</Option>\n                  <Option value=\"Selected\">Selected</Option>\n                  <Option value=\"Rejected\">Rejected</Option>\n                </Select>\n              </div>\n              <div>\n                {/*<RedButton style={{marginRight: 10}} onClick={() => console.log(\"Add User\")} disabled={true}>\n                  Add User +\n                </RedButton>*/}\n                <RedButton loading={mailLoader} onClick={() => sendMail()}>\n                  Send Link\n                </RedButton>\n              </div>\n            </div>\n\n            <div className='listQBox m-10 hideScroll'>\n              {!users || !users.length ?\n                    <Empty\n                      className='r-c-c-c'\n                      description={\n                      <div>\n                        <div className='text-lightGrey bold-600'>\n                          No Users Found\n                        </div>\n                        {/*<RedButton onClick={() => console.log(\"Add User\")}>\n                          Add User +\n                        </RedButton>*/}\n                      </div>\n                      }\n                      style={{marginTop: '20%'}}\n                    />\n                :\n                <div style={{height: '100%'}}>\n                  {users.filter(user => userStatusFilter === \"All\" ? user : user.status === userStatusFilter).map((user, index) =>\n                    <div className='cursor-pointer' onClick={() => this.setState({selectIndex: index})}\n                    key={index} style={{ margin: 5, padding: 5, borderRadius: 5,\n                      backgroundColor: this.state.selectIndex === index ? Color.lightprimary : 'transparent'}}>\n                      <div className='display-flex'>\n                        <div className='r-c-c' style={{flex: 1}}  ><Checkbox onClick={(e) => {updateUserSelect(index); e.stopPropagation();}} checked={user.selected}/></div>\n                        <div style={{flex:3}}>\n                          <div style={{fontSize: 16}}>{user.name}</div>\n                          <div style={{fontSize: 12, color: Color.aeGrey}}>{user.phone}</div>\n                        </div>\n                        {/*<div style={{flex:2}}>\n                          <div style={{fontSize: 16}}>{user.email}</div>\n                        </div>\n                        <div style={{flex:2}}>\n                          <div style={{fontSize: 16}}>2020</div>\n                          <div style={{fontSize: 10, color: Color.aeGrey}}>Year of Passing</div>\n                        </div>*/}\n                        <div style={{flex:1}}>\n                          <div style={{fontSize: 16}}>{user && user.testResult ?user.testResult.totalMarks : \"NA\" }</div>\n                          <div style={{fontSize: 10, color: Color.aeGrey}}>Score</div>\n                        </div>\n                        <div style={{flex:1}}>\n                          <div style={{fontSize: 16}}>{user && user.score && user.score || 'NA'}</div>\n                          <div style={{fontSize: 10, color: Color.aeGrey}}>CGPA</div>\n                        </div>\n                      </div>\n                    </div>\n\n                  )}\n                </div>}\n            </div>\n            <div className='display-flex' style={{ margin: 5, padding: 5, borderRadius: 5,}}>\n                <div className='r-c-c' style={{marginLeft: 60}}><Checkbox onClick={(e) => selectAll(e.target.checked)}>Select All</Checkbox></div>\n            </div>\n          </Col>\n          <Col xs={14}>\n            <div style={{height: '100%', width: '100%'}} >\n              {\n                this.state.selectIndex === -1 ?\n                  <div className='r-c-c' style={{height: '100%', width: '100%'}}>\n                    <Empty\n                      description=\"Select a student\"\n                    />\n                  </div>\n\n                :\n                <>\n                  <Row style={{width: '90%', margin: 10, padding: 10, backgroundColor: Color.darkGrey, borderRadius: 5}}>\n                      <Col span={22}>\n                        <div style={{fontSize: 20, color: 'white', fontWeight: 800}}>{users[this.state.selectIndex].name}</div>\n                        <div style={{fontSize: 14, color: 'white'}}>{users[this.state.selectIndex].email}</div>\n                      </Col>\n                      <Col span={2}>\n                        <div className='r-c-c-c' style={{fontSize: 20, color: 'white', fontWeight: 800}}>{users[this.state.selectIndex].passYear || 'NA'}</div>\n                      </Col>\n                  </Row>\n                  <Row style={{width: '90%', margin: 10, padding: 10}}>\n                      <div style={{width: '100%', border: '1px solid gray', padding: 10, borderRadius: 5}}>\n                        <Row>\n                          <span style={{fontWeight: 800, marginRight: 5}}>CGPA:</span> {users[this.state.selectIndex].score || 'NA'}\n                        </Row>\n                        <Row>\n                          <span style={{fontWeight: 800, marginRight: 5}}>Hackathon Result:</span>\n                        </Row>\n                        <Row>\n                          {users[this.state.selectIndex].testResult ? <Table\n                              style={{width: '100%'}}\n                              columns={columns}\n                              pagination={false}\n                              dataSource={ [users[this.state.selectIndex].testResult]}\n                            /> : 'NA'}\n                        </Row>\n                      </div>\n                      <div style={{width: '100%', border: '1px solid gray', padding: 10, borderRadius: 5, marginTop: 20}}>\n                        <Row>\n                          <span style={{fontWeight: 800, marginRight: 5}}>Programming Languages:</span> {users[this.state.selectIndex].programmingLangs.map((lang, index, array) => (<>{lang} {index == array.length - 1 ? '' : '|'} </>))}\n                        </Row>\n                        <Row>\n                          <span style={{fontWeight: 800, marginRight: 5}}>Skills:</span> {users[this.state.selectIndex].skills.map((skill, index, array) => (<>{skill} {index == array.length - 1 ? '' : '|'} </>))}\n                        </Row>\n                      </div>\n                      <div className=\"r-c-c-c\"style={{width: '100%',  padding: 10, borderRadius: 5, marginTop: 20}}>\n                        <Row>\n                          {\n                            users[this.state.selectIndex].status === \"Pending\" || users[this.state.selectIndex].status === \"Rejected\" ?\n                            <Button type=\"primary\" className=\"selectButton\" loading={selectLoader} onClick={() => this.changeUserStatus(\"Selected\")}>Select</Button> :\n                            <Tag color=\"green\" className=\"r-c-c\">Selected</Tag>\n                          }\n                          {\n                            users[this.state.selectIndex].status === \"Pending\" || users[this.state.selectIndex].status === \"Selected\" ?\n                            <Button type=\"primary\" className=\"rejectButton\" loading={rejectLoader} onClick={() => this.changeUserStatus(\"Rejected\")}>Reject</Button> :\n                            <Tag color=\"red\" className=\"r-c-c\">Rejected</Tag>\n                          }\n                        </Row>\n                      </div>\n                  </Row>\n                </>\n              }\n            </div>\n\n          </Col>\n        </Row>\n        <LoadingDataModal\n          visible={userLoader}\n          title='Users'\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    userLoader,\n    users,\n    selectLoader,\n    rejectLoader,\n    emailList,\n    userStatusFilter,\n    mailLoader\n  } = state.users;\n  return {\n    userLoader,\n    users,\n    selectLoader,\n    rejectLoader,\n    emailList,\n    userStatusFilter,\n    mailLoader\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getUsers: () => dispatch(getUsers()),\n  updateUserSelect: index => dispatch(updateUserSelect(index)),\n  selectAll: (bool) => dispatch(selectAll(bool)),\n  updateUserStatus: (index, userId, status) => dispatch(updateUserStatus(index, userId, status)),\n  sendMail: () => dispatch(sendMail()),\n  setUserStatusFilter: (val) => dispatch(setUserStatusFilter(val)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\ListQuestionBox.js",["194","195","196","197","198"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\components\\optionBox.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\services\\Api.js",["199","200"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\App.js",["201","202"],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\reducers\\users.js",["203"],"import {\n  TOGGLE_USER_LOADER,\n  UPDATE_USERS_LIST,\n  UPDATE_USER_SELECTED,\n  SELECT_ALL,\n  TOGGLE_STATUS_LOADER,\n  SET_USER_STATUS_FILTER,\n  UPDATE_USER_STATUS_LOCALLY,\n  TOGGLE_MAIL_LOADER\n} from '../actions/users';\n\nconst initialState = {\n  userLoader: false,\n  users: [],\n  emailList: [],\n  selectLoader: false,\n  rejectLoader: false,\n  userStatusFilter: \"All\",\n  mailLoader: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_USER_LOADER:\n      return {\n        ...state,\n        userLoader : action.bool\n      };\n    case TOGGLE_MAIL_LOADER:\n      return {\n        ...state,\n        mailLoader : action.bool\n      };\n    case SET_USER_STATUS_FILTER:\n      return {\n        ...state,\n        userStatusFilter : action.status\n      };\n    case UPDATE_USER_STATUS_LOCALLY:\n      state.users[action.index].status = action.status;\n      return {\n        ...state,\n        users : [...state.users]\n      }\n    case TOGGLE_STATUS_LOADER:\n      if(action.status === \"Selected\"){\n        return {\n          ...state,\n          selectLoader : action.bool\n        };\n      }else if(action.status === \"Rejected\"){\n        return {\n          ...state,\n          rejectLoader : action.bool\n        };\n      }\n\n    case UPDATE_USERS_LIST:\n      const userList = action.users.map(item => {\n        Object.assign(item, {selected: false})\n        return item;\n      })\n      return {\n        ...state,\n        users : userList\n      };\n    case UPDATE_USER_SELECTED:\n      state.users[action.index].selected = !state.users[action.index].selected\n      if(state.users[action.index].selected){\n        if(!state.emailList.includes(state.users[action.index].email)){\n          state.emailList.push(state.users[action.index].email)\n        }\n      }else{\n        if(state.emailList.includes(state.users[action.index].email)){\n          const index = state.emailList.indexOf(state.users[action.index].email);\n          state.emailList.splice(index, 1)\n        }\n      }\n      return {\n        ...state,\n        users : [...state.users],\n        emailList: [...state.emailList]\n      };\n    case SELECT_ALL:\n      const emails = [];\n      state.users.filter(user => state.userStatusFilter === \"All\" ? user : user.status === state.userStatusFilter).forEach(user => {\n        user.selected = action.bool\n        if(action.bool){\n          emails.push(user.email);\n        }\n      })\n      return {\n        ...state,\n        users : [...state.users],\n        emailList: emails\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\loremData.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\actions\\users.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\pages\\Admin\\formulaEditor\\imageHandler.js",[],"E:\\Abdul\\Brigosha\\hackathon-main\\src\\actions\\login.js",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":18,"column":9,"nodeType":"210","messageId":"211","endLine":18,"endColumn":16},{"ruleId":"208","severity":1,"message":"212","line":4,"column":11,"nodeType":"210","messageId":"211","endLine":4,"endColumn":16},{"ruleId":"208","severity":1,"message":"213","line":4,"column":25,"nodeType":"210","messageId":"211","endLine":4,"endColumn":30},{"ruleId":"208","severity":1,"message":"214","line":7,"column":10,"nodeType":"210","messageId":"211","endLine":7,"endColumn":25},{"ruleId":"208","severity":1,"message":"215","line":7,"column":27,"nodeType":"210","messageId":"211","endLine":7,"endColumn":41},{"ruleId":"208","severity":1,"message":"216","line":12,"column":3,"nodeType":"210","messageId":"211","endLine":12,"endColumn":14},{"ruleId":"208","severity":1,"message":"217","line":18,"column":9,"nodeType":"210","messageId":"211","endLine":18,"endColumn":12},{"ruleId":"208","severity":1,"message":"218","line":26,"column":10,"nodeType":"210","messageId":"211","endLine":26,"endColumn":23},{"ruleId":"208","severity":1,"message":"219","line":30,"column":7,"nodeType":"210","messageId":"211","endLine":30,"endColumn":15},{"ruleId":"208","severity":1,"message":"220","line":138,"column":7,"nodeType":"210","messageId":"211","endLine":138,"endColumn":11},{"ruleId":"208","severity":1,"message":"221","line":140,"column":7,"nodeType":"210","messageId":"211","endLine":140,"endColumn":16},{"ruleId":"208","severity":1,"message":"222","line":141,"column":7,"nodeType":"210","messageId":"211","endLine":141,"endColumn":15},{"ruleId":"208","severity":1,"message":"223","line":142,"column":7,"nodeType":"210","messageId":"211","endLine":142,"endColumn":15},{"ruleId":"208","severity":1,"message":"224","line":148,"column":7,"nodeType":"210","messageId":"211","endLine":148,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":249,"column":46,"nodeType":"227","messageId":"228","endLine":249,"endColumn":48},{"ruleId":"208","severity":1,"message":"224","line":271,"column":7,"nodeType":"210","messageId":"211","endLine":271,"endColumn":19},{"ruleId":"204","replacedBy":"229"},{"ruleId":"206","replacedBy":"230"},{"ruleId":"208","severity":1,"message":"231","line":2,"column":28,"nodeType":"210","messageId":"211","endLine":2,"endColumn":34},{"ruleId":"208","severity":1,"message":"217","line":10,"column":9,"nodeType":"210","messageId":"211","endLine":10,"endColumn":12},{"ruleId":"208","severity":1,"message":"232","line":2,"column":33,"nodeType":"210","messageId":"211","endLine":2,"endColumn":41},{"ruleId":"208","severity":1,"message":"233","line":2,"column":43,"nodeType":"210","messageId":"211","endLine":2,"endColumn":47},{"ruleId":"208","severity":1,"message":"234","line":3,"column":25,"nodeType":"210","messageId":"211","endLine":3,"endColumn":37},{"ruleId":"208","severity":1,"message":"235","line":19,"column":25,"nodeType":"210","messageId":"211","endLine":19,"endColumn":45},{"ruleId":"236","severity":1,"message":"237","line":54,"column":54,"nodeType":"227","messageId":"238","endLine":54,"endColumn":55},{"ruleId":"208","severity":1,"message":"239","line":92,"column":7,"nodeType":"210","messageId":"211","endLine":92,"endColumn":13},{"ruleId":"204","replacedBy":"240"},{"ruleId":"206","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":24,"column":9,"nodeType":"244","endLine":24,"endColumn":20},{"ruleId":"242","severity":1,"message":"243","line":36,"column":9,"nodeType":"244","endLine":36,"endColumn":20},{"ruleId":"208","severity":1,"message":"245","line":1,"column":10,"nodeType":"210","messageId":"211","endLine":1,"endColumn":21},{"ruleId":"246","severity":1,"message":"247","line":19,"column":9,"nodeType":"248","messageId":"249","endLine":19,"endColumn":58},{"ruleId":"208","severity":1,"message":"250","line":4,"column":13,"nodeType":"210","messageId":"211","endLine":4,"endColumn":16},{"ruleId":"208","severity":1,"message":"251","line":6,"column":3,"nodeType":"210","messageId":"211","endLine":6,"endColumn":8},{"ruleId":"208","severity":1,"message":"252","line":7,"column":3,"nodeType":"210","messageId":"211","endLine":7,"endColumn":9},{"ruleId":"208","severity":1,"message":"253","line":28,"column":3,"nodeType":"210","messageId":"211","endLine":28,"endColumn":16},{"ruleId":"208","severity":1,"message":"215","line":28,"column":18,"nodeType":"210","messageId":"211","endLine":28,"endColumn":32},{"ruleId":"208","severity":1,"message":"254","line":29,"column":23,"nodeType":"210","messageId":"211","endLine":29,"endColumn":35},{"ruleId":"208","severity":1,"message":"255","line":32,"column":9,"nodeType":"210","messageId":"211","endLine":32,"endColumn":27},{"ruleId":"208","severity":1,"message":"256","line":32,"column":29,"nodeType":"210","messageId":"211","endLine":32,"endColumn":39},{"ruleId":"208","severity":1,"message":"257","line":32,"column":41,"nodeType":"210","messageId":"211","endLine":32,"endColumn":57},{"ruleId":"208","severity":1,"message":"258","line":36,"column":9,"nodeType":"210","messageId":"211","endLine":36,"endColumn":13},{"ruleId":"208","severity":1,"message":"259","line":39,"column":9,"nodeType":"210","messageId":"211","endLine":39,"endColumn":16},{"ruleId":"208","severity":1,"message":"219","line":42,"column":7,"nodeType":"210","messageId":"211","endLine":42,"endColumn":15},{"ruleId":"208","severity":1,"message":"260","line":43,"column":7,"nodeType":"210","messageId":"211","endLine":43,"endColumn":13},{"ruleId":"208","severity":1,"message":"261","line":138,"column":7,"nodeType":"210","messageId":"211","endLine":138,"endColumn":18},{"ruleId":"262","severity":1,"message":"263","line":154,"column":15,"nodeType":"264","messageId":"265","endLine":154,"endColumn":17},{"ruleId":"208","severity":1,"message":"266","line":178,"column":7,"nodeType":"210","messageId":"211","endLine":178,"endColumn":19},{"ruleId":"208","severity":1,"message":"267","line":183,"column":7,"nodeType":"210","messageId":"211","endLine":183,"endColumn":22},{"ruleId":"208","severity":1,"message":"268","line":189,"column":7,"nodeType":"210","messageId":"211","endLine":189,"endColumn":19},{"ruleId":"208","severity":1,"message":"269","line":14,"column":3,"nodeType":"210","messageId":"211","endLine":14,"endColumn":21},{"ruleId":"270","severity":1,"message":"271","line":65,"column":3,"nodeType":"272","messageId":"228","endLine":65,"endColumn":14},{"ruleId":"208","severity":1,"message":"251","line":5,"column":3,"nodeType":"210","messageId":"211","endLine":5,"endColumn":8},{"ruleId":"208","severity":1,"message":"213","line":5,"column":10,"nodeType":"210","messageId":"211","endLine":5,"endColumn":15},{"ruleId":"208","severity":1,"message":"252","line":6,"column":3,"nodeType":"210","messageId":"211","endLine":6,"endColumn":9},{"ruleId":"208","severity":1,"message":"233","line":7,"column":3,"nodeType":"210","messageId":"211","endLine":7,"endColumn":7},{"ruleId":"208","severity":1,"message":"232","line":7,"column":9,"nodeType":"210","messageId":"211","endLine":7,"endColumn":17},{"ruleId":"208","severity":1,"message":"253","line":12,"column":3,"nodeType":"210","messageId":"211","endLine":12,"endColumn":16},{"ruleId":"208","severity":1,"message":"215","line":12,"column":18,"nodeType":"210","messageId":"211","endLine":12,"endColumn":32},{"ruleId":"208","severity":1,"message":"273","line":13,"column":3,"nodeType":"210","messageId":"211","endLine":13,"endColumn":21},{"ruleId":"208","severity":1,"message":"254","line":13,"column":23,"nodeType":"210","messageId":"211","endLine":13,"endColumn":35},{"ruleId":"208","severity":1,"message":"274","line":13,"column":37,"nodeType":"210","messageId":"211","endLine":13,"endColumn":49},{"ruleId":"208","severity":1,"message":"255","line":15,"column":9,"nodeType":"210","messageId":"211","endLine":15,"endColumn":27},{"ruleId":"208","severity":1,"message":"256","line":15,"column":29,"nodeType":"210","messageId":"211","endLine":15,"endColumn":39},{"ruleId":"208","severity":1,"message":"257","line":15,"column":41,"nodeType":"210","messageId":"211","endLine":15,"endColumn":57},{"ruleId":"208","severity":1,"message":"275","line":16,"column":9,"nodeType":"210","messageId":"211","endLine":16,"endColumn":24},{"ruleId":"208","severity":1,"message":"276","line":16,"column":37,"nodeType":"210","messageId":"211","endLine":16,"endColumn":46},{"ruleId":"208","severity":1,"message":"259","line":25,"column":9,"nodeType":"210","messageId":"211","endLine":25,"endColumn":16},{"ruleId":"208","severity":1,"message":"219","line":28,"column":7,"nodeType":"210","messageId":"211","endLine":28,"endColumn":15},{"ruleId":"208","severity":1,"message":"260","line":29,"column":7,"nodeType":"210","messageId":"211","endLine":29,"endColumn":13},{"ruleId":"277","severity":1,"message":"278","line":178,"column":75,"nodeType":"279","messageId":"280","endLine":178,"endColumn":77},{"ruleId":"277","severity":1,"message":"278","line":178,"column":89,"nodeType":"279","messageId":"280","endLine":178,"endColumn":91},{"ruleId":"225","severity":1,"message":"226","line":231,"column":198,"nodeType":"227","messageId":"228","endLine":231,"endColumn":200},{"ruleId":"225","severity":1,"message":"226","line":234,"column":175,"nodeType":"227","messageId":"228","endLine":234,"endColumn":177},{"ruleId":"208","severity":1,"message":"281","line":4,"column":27,"nodeType":"210","messageId":"211","endLine":4,"endColumn":39},{"ruleId":"208","severity":1,"message":"282","line":4,"column":41,"nodeType":"210","messageId":"211","endLine":4,"endColumn":61},{"ruleId":"208","severity":1,"message":"283","line":4,"column":63,"nodeType":"210","messageId":"211","endLine":4,"endColumn":74},{"ruleId":"284","severity":1,"message":"285","line":40,"column":28,"nodeType":"286","endLine":40,"endColumn":104},{"ruleId":"284","severity":1,"message":"285","line":51,"column":30,"nodeType":"286","endLine":51,"endColumn":106},{"ruleId":"287","severity":1,"message":"288","line":9,"column":3,"nodeType":"289","messageId":"290","endLine":11,"endColumn":4},{"ruleId":"225","severity":1,"message":"226","line":131,"column":33,"nodeType":"227","messageId":"228","endLine":131,"endColumn":35},{"ruleId":"208","severity":1,"message":"291","line":2,"column":10,"nodeType":"210","messageId":"211","endLine":2,"endColumn":17},{"ruleId":"287","severity":1,"message":"288","line":34,"column":3,"nodeType":"289","messageId":"290","endLine":36,"endColumn":4},{"ruleId":"292","severity":1,"message":"293","line":58,"column":5,"nodeType":"294","messageId":"295","endLine":66,"endColumn":9},"no-native-reassign",["296"],"no-negated-in-lhs",["297"],"no-unused-vars","'Content' is assigned a value but never used.","Identifier","unusedVar","'Empty' is defined but never used.","'Input' is defined but never used.","'LoadingOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'LoginInputs' is defined but never used.","'Api' is defined but never used.","'BsCheckCircle' is defined but never used.","'thickPic' is assigned a value but never used.","'type' is assigned a value but never used.","'startTime' is assigned a value but never used.","'sendDate' is assigned a value but never used.","'sendTime' is assigned a value but never used.","'addAdminTest' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["296"],["297"],"'Switch' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'DownOutlined' is defined but never used.","'BsExclamationDiamond' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'skills' is assigned a value but never used.",["296"],["297"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'createStore' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'Tag' is defined but never used.","'Radio' is defined but never used.","'Upload' is defined but never used.","'CloseOutlined' is defined but never used.","'StarOutlined' is defined but never used.","'BsFillBookmarkFill' is defined but never used.","'BsBookmark' is defined but never used.","'BsCaretRightFill' is defined but never used.","'data' is defined but never used.","'TabPane' is assigned a value but never used.","'phpImg' is assigned a value but never used.","'adminQIndex' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'addAdminQues' is assigned a value but never used.","'deleteAdminQues' is assigned a value but never used.","'pushQToArray' is assigned a value but never used.","'SET_ADMIN_QUESTION' is defined but never used.","no-dupe-keys","Duplicate key 'editingTest'.","ObjectExpression","'PlusCircleOutlined' is defined but never used.","'LeftOutlined' is defined but never used.","'ListQuestionBox' is defined but never used.","'OptionBox' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'processNodes' is defined but never used.","'convertNodeToElement' is defined but never used.","'htmlparser2' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'connect' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-global-assign","no-unsafe-negation"]